// Code generated by easyjson for marshaling/unmarshaling. Patched
// by hand to work with types located in a different package.

package imapsql

import (
	"github.com/emersion/go-imap"
	"github.com/mailru/easyjson/jlexer"
	"github.com/mailru/easyjson/jwriter"
)

func easyjsonUnmarshalEnvelope(in *jlexer.Lexer, out *imap.Envelope) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "Subject":
			out.Subject = in.String()
		case "From":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				in.Delim('[')
				if out.From == nil {
					if !in.IsDelim(']') {
						out.From = make([]*imap.Address, 0, 8)
					} else {
						out.From = []*imap.Address{}
					}
				} else {
					out.From = (out.From)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *imap.Address
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(imap.Address)
						}
						easyjsonUnmarshalAddress(in, v1)
					}
					out.From = append(out.From, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Sender":
			if in.IsNull() {
				in.Skip()
				out.Sender = nil
			} else {
				in.Delim('[')
				if out.Sender == nil {
					if !in.IsDelim(']') {
						out.Sender = make([]*imap.Address, 0, 8)
					} else {
						out.Sender = []*imap.Address{}
					}
				} else {
					out.Sender = (out.Sender)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *imap.Address
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(imap.Address)
						}
						easyjsonUnmarshalAddress(in, v2)
					}
					out.Sender = append(out.Sender, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ReplyTo":
			if in.IsNull() {
				in.Skip()
				out.ReplyTo = nil
			} else {
				in.Delim('[')
				if out.ReplyTo == nil {
					if !in.IsDelim(']') {
						out.ReplyTo = make([]*imap.Address, 0, 8)
					} else {
						out.ReplyTo = []*imap.Address{}
					}
				} else {
					out.ReplyTo = (out.ReplyTo)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *imap.Address
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(imap.Address)
						}
						easyjsonUnmarshalAddress(in, v3)
					}
					out.ReplyTo = append(out.ReplyTo, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "To":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				in.Delim('[')
				if out.To == nil {
					if !in.IsDelim(']') {
						out.To = make([]*imap.Address, 0, 8)
					} else {
						out.To = []*imap.Address{}
					}
				} else {
					out.To = (out.To)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *imap.Address
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(imap.Address)
						}
						easyjsonUnmarshalAddress(in, v4)
					}
					out.To = append(out.To, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Cc":
			if in.IsNull() {
				in.Skip()
				out.Cc = nil
			} else {
				in.Delim('[')
				if out.Cc == nil {
					if !in.IsDelim(']') {
						out.Cc = make([]*imap.Address, 0, 8)
					} else {
						out.Cc = []*imap.Address{}
					}
				} else {
					out.Cc = (out.Cc)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *imap.Address
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(imap.Address)
						}
						easyjsonUnmarshalAddress(in, v5)
					}
					out.Cc = append(out.Cc, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Bcc":
			if in.IsNull() {
				in.Skip()
				out.Bcc = nil
			} else {
				in.Delim('[')
				if out.Bcc == nil {
					if !in.IsDelim(']') {
						out.Bcc = make([]*imap.Address, 0, 8)
					} else {
						out.Bcc = []*imap.Address{}
					}
				} else {
					out.Bcc = (out.Bcc)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *imap.Address
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(imap.Address)
						}
						easyjsonUnmarshalAddress(in, v6)
					}
					out.Bcc = append(out.Bcc, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "InReplyTo":
			out.InReplyTo = string(in.String())
		case "MessageId":
			out.MessageId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjsonMarshalEnvelope(out *jwriter.Writer, in imap.Envelope) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix[1:])
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"Subject\":"
		out.RawString(prefix)
		out.String(in.Subject)
	}
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix)
		if in.From == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.From {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil {
					out.RawString("null")
				} else {
					easyjsonMarshalAddress(out, *v8)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Sender\":"
		out.RawString(prefix)
		if in.Sender == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Sender {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					easyjsonMarshalAddress(out, *v10)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ReplyTo\":"
		out.RawString(prefix)
		if in.ReplyTo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.ReplyTo {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjsonMarshalAddress(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		if in.To == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.To {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					easyjsonMarshalAddress(out, *v14)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Cc\":"
		out.RawString(prefix)
		if in.Cc == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Cc {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					easyjsonMarshalAddress(out, *v16)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Bcc\":"
		out.RawString(prefix)
		if in.Bcc == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Bcc {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					easyjsonMarshalAddress(out, *v18)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"InReplyTo\":"
		out.RawString(prefix)
		out.String(string(in.InReplyTo))
	}
	{
		const prefix string = ",\"MessageId\":"
		out.RawString(prefix)
		out.String(string(in.MessageId))
	}
	out.RawByte('}')
}

func easyjsonUnmarshalBodyStruct(in *jlexer.Lexer, out *imap.BodyStructure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MIMEType":
			out.MIMEType = string(in.String())
		case "MIMESubType":
			out.MIMESubType = string(in.String())
		case "Params":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Params = make(map[string]string)
				} else {
					out.Params = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 string
					v19 = string(in.String())
					(out.Params)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Id":
			out.Id = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Encoding":
			out.Encoding = string(in.String())
		case "Size":
			out.Size = uint32(in.Uint32())
		case "Parts":
			if in.IsNull() {
				in.Skip()
				out.Parts = nil
			} else {
				in.Delim('[')
				if out.Parts == nil {
					if !in.IsDelim(']') {
						out.Parts = make([]*imap.BodyStructure, 0, 8)
					} else {
						out.Parts = []*imap.BodyStructure{}
					}
				} else {
					out.Parts = (out.Parts)[:0]
				}
				for !in.IsDelim(']') {
					var v20 *imap.BodyStructure
					if in.IsNull() {
						in.Skip()
						v20 = nil
					} else {
						if v20 == nil {
							v20 = new(imap.BodyStructure)
						}
						easyjsonUnmarshalBodyStruct(in, v20)
					}
					out.Parts = append(out.Parts, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Envelope":
			if in.IsNull() {
				in.Skip()
				out.Envelope = nil
			} else {
				if out.Envelope == nil {
					out.Envelope = new(imap.Envelope)
				}
				easyjsonUnmarshalEnvelope(in, out.Envelope)
			}
		case "BodyStructure":
			if in.IsNull() {
				in.Skip()
				out.BodyStructure = nil
			} else {
				if out.BodyStructure == nil {
					out.BodyStructure = new(imap.BodyStructure)
				}
				easyjsonUnmarshalBodyStruct(in, out.BodyStructure)
			}
		case "Lines":
			out.Lines = uint32(in.Uint32())
		case "Extended":
			out.Extended = bool(in.Bool())
		case "Disposition":
			out.Disposition = string(in.String())
		case "DispositionParams":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DispositionParams = make(map[string]string)
				} else {
					out.DispositionParams = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 string
					v21 = string(in.String())
					(out.DispositionParams)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Language":
			if in.IsNull() {
				in.Skip()
				out.Language = nil
			} else {
				in.Delim('[')
				if out.Language == nil {
					if !in.IsDelim(']') {
						out.Language = make([]string, 0, 4)
					} else {
						out.Language = []string{}
					}
				} else {
					out.Language = (out.Language)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.Language = append(out.Language, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				in.Delim('[')
				if out.Location == nil {
					if !in.IsDelim(']') {
						out.Location = make([]string, 0, 4)
					} else {
						out.Location = []string{}
					}
				} else {
					out.Location = (out.Location)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.Location = append(out.Location, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MD5":
			out.MD5 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonMarshalBodyStruct(out *jwriter.Writer, in imap.BodyStructure) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MIMEType\":"
		out.RawString(prefix[1:])
		out.String(string(in.MIMEType))
	}
	{
		const prefix string = ",\"MIMESubType\":"
		out.RawString(prefix)
		out.String(string(in.MIMESubType))
	}
	{
		const prefix string = ",\"Params\":"
		out.RawString(prefix)
		if in.Params == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Params {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				out.String(string(v24Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Encoding\":"
		out.RawString(prefix)
		out.String(string(in.Encoding))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Size))
	}
	{
		const prefix string = ",\"Parts\":"
		out.RawString(prefix)
		if in.Parts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Parts {
				if v25 > 0 {
					out.RawByte(',')
				}
				if v26 == nil {
					out.RawString("null")
				} else {
					easyjsonMarshalBodyStruct(out, *v26)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Envelope\":"
		out.RawString(prefix)
		if in.Envelope == nil {
			out.RawString("null")
		} else {
			easyjsonMarshalEnvelope(out, *in.Envelope)
		}
	}
	{
		const prefix string = ",\"BodyStructure\":"
		out.RawString(prefix)
		if in.BodyStructure == nil {
			out.RawString("null")
		} else {
			easyjsonMarshalBodyStruct(out, *in.BodyStructure)
		}
	}
	{
		const prefix string = ",\"Lines\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Lines))
	}
	{
		const prefix string = ",\"Extended\":"
		out.RawString(prefix)
		out.Bool(bool(in.Extended))
	}
	{
		const prefix string = ",\"Disposition\":"
		out.RawString(prefix)
		out.String(string(in.Disposition))
	}
	{
		const prefix string = ",\"DispositionParams\":"
		out.RawString(prefix)
		if in.DispositionParams == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v27First := true
			for v27Name, v27Value := range in.DispositionParams {
				if v27First {
					v27First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v27Name))
				out.RawByte(':')
				out.String(string(v27Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Language\":"
		out.RawString(prefix)
		if in.Language == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.Language {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Location\":"
		out.RawString(prefix)
		if in.Location == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.Location {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MD5\":"
		out.RawString(prefix)
		out.String(string(in.MD5))
	}
	out.RawByte('}')
}

func easyjsonUnmarshalAddress(in *jlexer.Lexer, out *imap.Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PersonalName":
			out.PersonalName = string(in.String())
		case "AtDomainList":
			out.AtDomainList = string(in.String())
		case "MailboxName":
			out.MailboxName = string(in.String())
		case "HostName":
			out.HostName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjsonMarshalAddress(out *jwriter.Writer, in imap.Address) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PersonalName\":"
		out.RawString(prefix[1:])
		out.String(string(in.PersonalName))
	}
	{
		const prefix string = ",\"AtDomainList\":"
		out.RawString(prefix)
		out.String(string(in.AtDomainList))
	}
	{
		const prefix string = ",\"MailboxName\":"
		out.RawString(prefix)
		out.String(string(in.MailboxName))
	}
	{
		const prefix string = ",\"HostName\":"
		out.RawString(prefix)
		out.String(string(in.HostName))
	}
	out.RawByte('}')
}
